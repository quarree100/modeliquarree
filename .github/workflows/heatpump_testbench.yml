# GitHub actions designed for the heatpump testbench project
# We basically walk two paths here, depending on runner.os (Windows / Linux):
# 1. On Linux, it is easy to automatically install OpenModelica,
#    so we can test the complete process and run a Modelica model
# 2. On Windows, instead we run the simulation with the stored FMU

name: HP Testbench

on: [push, pull_request]

jobs:
  job_1:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    name: Build
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python: [3.8]
        aixlib: [0.10.7]
        modelica: [stable]  # "nightly" testing fails
        experimental: [false]
        include:
          - os: ubuntu-latest
            python: 3.8
            aixlib: 0.10.7
            modelica: release  # Currently, "release" does not finish simulating
            experimental: true

    steps:
    - name: Checkout
      uses: actions/checkout@v1  # use the latest code commit

    - name: Setup conda with python ${{ matrix.python }}
      uses: s-weigand/setup-conda@v1
      with:
          python-version: ${{ matrix.python }}

    - name: Install Python dependencies
      run: |
        conda install pandas matplotlib conda-build

    - name: Install OpenModelica
      if: runner.os == 'Linux'  # This only works on Linux
      run: |
        # Installation instructions based on:
        # https://www.openmodelica.org/download/download-linux

        # Add sources for packaged openmodelica
        # for latest version in "release" channel do:
        for deb in deb deb-src; do echo "$deb http://build.openmodelica.org/apt `lsb_release -cs` ${{ matrix.modelica }}"; done | sudo tee /etc/apt/sources.list.d/openmodelica.list
        # To install specific older versions, do:
        # for deb in deb; do echo "$deb https://build.openmodelica.org/omc/builds/linux/releases/1.14.2/ `lsb_release -cs` release"; done | sudo tee /etc/apt/sources.list.d/openmodelica.list
        # You will also need to import the GPG key used to sign the releases:
        wget -q http://build.openmodelica.org/apt/openmodelica.asc -O - | sudo apt-key add -
        # To verify that your key is installed correctly
        apt-key fingerprint

        # Then update and install OpenModelica
        sudo apt update
        sudo apt install openmodelica
        sudo apt install omlib-modelica-synchronous-0.92.1
        sudo apt install omlib-ncdatareader2-2.4.0
        sudo apt install omlib-modelica-devicedrivers-1.8.2
        #sudo apt install omlib-aixlib-0.9.1 # works, but only with some releases
        #sudo apt install omlib-.* # Installs optional Modelica libraries (most have not been tested with OpenModelica)

    - name: Install AixLib
      if: runner.os == 'Linux'  # Only required on Linux
      run: |
        wget -q https://github.com/jnettels/AixLib/archive/v${{ matrix.aixlib }}.tar.gz -O - | sudo tar xzf - -C /usr/lib/omlibrary/
        sudo mv /usr/lib/omlibrary/AixLib-${{ matrix.aixlib }}/AixLib/ '/usr/lib/omlibrary/AixLib ${{ matrix.aixlib }}'
        sudo rm -r /usr/lib/omlibrary/AixLib-${{ matrix.aixlib }}

    - name: Install OMPython and PyFMI
      run: |
        # Install OMPython
        python -m pip install -U https://github.com/OpenModelica/OMPython/archive/v3.2.0.zip

        # For python FMI interaction, install pyfmi
        conda install -c conda-forge pyfmi assimulo -y

    - name: Build & install with conda
      run: |
        conda build ./HP_testbench/conda.recipe -c conda-forge
        conda install hptestbench --use-local  # Regular installation
        # conda develop ./HP_testbench/  # Installation in developer mode

#    - name: Run the unittest for hptestbench
#      if: runner.os == 'Windows'
#      run: python ./HP_testbench/conda.recipe/run_test.py

    - name: Run the main method of hptestbench (a simulation with OpenModelica)
      timeout-minutes: 5
      if: runner.os == 'Linux'
      run: python ./HP_testbench/hptestbench

    - name: Lint with flake8
      if: runner.os == 'Linux'  # Only needs to run once
      run: |
        conda install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
